import java.util.*; 

class MemoryGame implements Game{
  boolean isWinner;
  boolean isMatch;
  boolean isValid;
  String gameStatus;
  int boardSize = 4;
  int turnCount;
  boolean match;
  int matchCount = 0;
  
  int[][] card1 = new int[boardSize][boardSize];
  int[][] card2 = new int[boardSize][boardSize]; 
  int[][] secretBoard = new int[boardSize][boardSize];
 
   //Default constructor
   public void setUp(){
      isWinner = false;
      boardSize = 4;
      turnCount = 0;
   }
  //Set up the hidden board 
   public void setBoard(){

    if(boardSize==2){
      secretBoard[0][0] = 1;
      secretBoard[0][1] = 1;
      secretBoard[1][0] = 2;
      secretBoard[1][1] = 2;
    }
    if(boardSize==4){
     for(int i=0; i<4 ;i++){
         secretBoard[0][i] = 1;}
                    
      for(int i=0; i<4 ;i++){
         secretBoard[2][i] = 1;}

      for(int i=0; i<4;i++){
         secretBoard[1][i] = 2;}
         
      for(int i=0; i<4;i++){
         secretBoard[3][i] = 2;}   
  }  
    if(boardSize ==8){
      for(int i=0; i<8;i++){
         secretBoard[0][i] = 1;}
                        
      for(int i=0; i<8;i++){
         secretBoard[2][i] = 1;}
         
      for(int i=0; i<8;i++){
         secretBoard[4][i] = 1;}
 
      for(int i=0; i<8;i++){
         secretBoard[6][i] = 1;}   

      for(int i=0; i<8;i++){
         secretBoard[1][i] = 2;}
         
      for(int i=0; i<8;i++){
         secretBoard[3][i] = 2;}
         
      for(int i=0; i<8;i++){
         secretBoard[5][i] = 2;}
 
      for(int i=0; i<8;i++){
         secretBoard[7][i] = 2;}  
    }         
  }  
   
   //Accessors
   public boolean isWinner(){
         return isWinner;
   }//isWinner
   
   public int getTurnCnt(){
      return turnCount;
   }//getTurnCount
   
   public int getMatchCount(){
      return matchCount;
   }//getMatchCount  
   public int getBoardSize(){
      return boardSize;
   }//getBoardSize
         
   //Mutators

   public void takeTurn(int[] x){
      turnCount++;
   }//takeTurn
         
   public boolean isValidInput(int [] x){
      isValid = true;
      return isValid;
   } //isValidInput  
         
   public String gameOverStatus(){
      if(isWinner == true)
         return("won");
      else
         return("NA");
   }//gameOverStatus
   
   public boolean isMatch(int[] x){
      if(secretBoard[x[0]][x[1]] == secretBoard[x[2]][x[3]]){
        match = true;
        return match;  
      }
      else {
        match = false;
        return match;
       }
   }//isMatch
   
   public int matchCount(){
      if(match == true){
         matchCount++;
      }   
      return matchCount;
   }
        
   public void checkWinner(){
      if(matchCount >= 2){
         isWinner = true;
      }
      else
         isWinner = false;
   }//checkWinner  
     
}// Game class




import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.paint.Color; 
import javafx.scene.layout.*;
import javafx.scene.control.Label;
import javafx.scene.control.Button;
import javafx.scene.text.Font;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.geometry.Pos;
import javafx.event.EventHandler;
import javafx.event.ActionEvent;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import java.util.*; 

public class ConcentrationStartThree extends Application
{
   Font appFont = new Font("Helvetica",24);
   Label myLabel;
   Button [][] buttons;  
   Button [][] images;
   Label resultLabel; 
   GridPane grid;
   GridPane imagegrid;
   int [] coorlist = new int[4];
   int numberoftries = 0;
   int numberoftimeswon = 0;
   int newTurnCount = 0;
   MemoryGame mg = new MemoryGame();

   public static void main(String[] args)
   {
      // Launch the application.
      launch(args);
   }
   
   @Override
   
   public void start(Stage stage)
   {  
      // Make new GridPane.
      grid = new GridPane( );
      grid.setAlignment(Pos.BASELINE_CENTER);
      int size = mg.getBoardSize();
      mg.setBoard(); 

      imagegrid = new GridPane( );
          
      buttons = makeAGrid(grid,size); 
       
      myLabel = makeLabel("Welcome to Concentration. Match all the tiles."); 

      resultLabel = new Label(" ");
      
      VBox vbox = new VBox(myLabel, grid, resultLabel); 

      Scene scene = new Scene(vbox,1000,1000);   
      
      scene.getStylesheets().add("cssfile.css");   

      stage.setScene(scene);    

      stage.setTitle("Concentration/Memory Match Game");

      stage.show();
   }
   
   Label makeLabel(String s){
      Label label = new Label(s); 
      label.setFont(appFont); 
      return(label); 
   }
   
   Button makeButton(Image img){
       // create a button with an image on it
      // Create an ImageView component to decorate Button
      ImageView iView = new ImageView(img);
      iView.setFitWidth(50); 
      iView.setFitHeight(50);
      
      Button newButton =  new Button("",iView);
      return(newButton); 
   }

   Button [][]  makeAGrid(GridPane grid, int size){
   // square grid, size x size
      Button [][] b = new Button[size][size];
   
      for(int r=0;r<size;r++){ 
         for(int c = 0;c<size;c++){
            if((r+c)%2 ==0)
               b[r][c] = makeButton(new Image("file:mark.jpg"));
            else
               b[r][c] = makeButton(new Image("file:mark.jpg"));
         // add b to the grid
            grid.add(b[r][c],c, r);
         // Register the event handler.
           b[r][c].setOnAction(new ButtonClickHandler());
         } 
      }
      return(b);}  
      
Button [][]  makeAnImageGrid(GridPane imagegrid, int size){
   // square grid, size x size
      Button [][] b = new Button[size][size];
      
      if(size == 2){
         b[0][0] = makeButton(new Image("file:x.png"));
         imagegrid.add(b[0][0],0, 0);
      
         b[0][1] = makeButton(new Image("file:x.png"));
         imagegrid.add(b[0][1],1, 0);
         
          b[1][0] = makeButton(new Image("file:o.png"));
         imagegrid.add(b[1][0],0, 1);
      
         b[1][1] = makeButton(new Image("file:o.png"));
         imagegrid.add(b[1][1],1, 1);
      }
      
      if(size ==4){
         b[0][0] = makeButton(new Image("file:x.png"));
         imagegrid.add(b[0][0],0, 0);
      
         b[0][1] = makeButton(new Image("file:x.png"));
         imagegrid.add(b[0][1],1, 0);
      
         b[0][2] = makeButton(new Image("file:x.png"));
         imagegrid.add(b[0][2],2, 0);
      
         b[0][3] = makeButton(new Image("file:x.png"));
         imagegrid.add(b[0][3],3, 0);
       
         b[1][0] = makeButton(new Image("file:o.png"));
         imagegrid.add(b[1][0],0, 1);
      
         b[1][1] = makeButton(new Image("file:o.png"));
         imagegrid.add(b[1][1],1, 1);
      
         b[1][2] = makeButton(new Image("file:o.png"));
         imagegrid.add(b[1][2],2, 1);
      
         b[1][3] = makeButton(new Image("file:o.png"));
         imagegrid.add(b[1][3],3, 1);
      
         b[2][0] = makeButton(new Image("file:x.png"));
         imagegrid.add(b[2][0],0, 2);
      
         b[2][1] = makeButton(new Image("file:x.png"));
         imagegrid.add(b[2][1],1, 2);
      
         b[2][2] = makeButton(new Image("file:x.png"));
         imagegrid.add(b[2][2],2, 2);
      
         b[2][3] = makeButton(new Image("file:x.png"));
         imagegrid.add(b[2][3],3, 2);
      
         b[3][0] = makeButton(new Image("file:o.png"));
         imagegrid.add(b[3][0],0, 3);
      
         b[3][1] = makeButton(new Image("file:o.png"));
         imagegrid.add(b[3][1],1, 3); 
      
         b[3][2] = makeButton(new Image("file:o.png"));
         imagegrid.add(b[3][2],2, 3); 
      
         b[3][3] = makeButton(new Image("file:o.png"));
         imagegrid.add(b[3][3],3, 3);  
      }
       if(size == 8){
      for (int i=0; i<8; i++){
         b[0][i] = makeButton(new Image("file:x.png"));
         imagegrid.add(b[0][i],i, 0);}  
         
      for (int i=0; i<8; i++){
         b[2][i] = makeButton(new Image("file:x.png"));
         imagegrid.add(b[2][i],i, 2);}   
      
      for (int i=0; i<8; i++){
         b[4][i] = makeButton(new Image("file:x.png"));
         imagegrid.add(b[4][i],i, 4);}      

      for (int i=0; i<8; i++){
         b[6][i] = makeButton(new Image("file:x.png"));
         imagegrid.add(b[6][i],i, 6);}    
         
      for (int i=0; i<8; i++){
         b[1][i] = makeButton(new Image("file:o.png"));
         imagegrid.add(b[1][i],i, 1);}   
      
      for (int i=0; i<8; i++){
         b[3][i] = makeButton(new Image("file:o.png"));
         imagegrid.add(b[3][i],i, 3);}   
      
      for (int i=0; i<8; i++){
         b[5][i] = makeButton(new Image("file:o.png"));
         imagegrid.add(b[5][i],i, 5);}   
         
      for (int i=0; i<8; i++){
         b[7][i] = makeButton(new Image("file:o.png"));
         imagegrid.add(b[7][i],i, 7);}   
      }     
      return(b);}
  
class ButtonClickHandler implements EventHandler<ActionEvent> {

   @Override
   
   public void handle(ActionEvent event) {
   
   images = makeAnImageGrid(imagegrid, mg.getBoardSize());// added function here
   
   if(numberoftries < 32){
   
   for(int r=0;r<mg.getBoardSize();r++){ //added getSize func here
      for(int c = 0;c<mg.getBoardSize();c++){//added getSize here
         if(event.getSource().equals(buttons[r][c])){ 
            if(newTurnCount%2==0){
               grid.getChildren().remove(buttons[r][c]);
               grid.add(images[r][c],c, r);
               coorlist[0] = r;
               coorlist[1] = c;
               newTurnCount++;}
            else {
               grid.add(images[r][c],c, r);
               coorlist[2] = r;
               coorlist[3] = c;
               newTurnCount++;} 
               }}}
            
    
     if(newTurnCount%2==0){   
         
        mg.takeTurn(coorlist); 
        boolean row = mg.isMatch(coorlist);
        
        if(row){
         numberoftimeswon = numberoftimeswon + 1;
         numberoftries = numberoftries + 1;
         resultLabel.setText("MATCH!" + "\n" + "You tried: " + numberoftries + " time(s).");
         if(numberoftimeswon == (mg.getBoardSize()*2)){//Addes Size func here
            resultLabel.setText("You won the game!");} 
         }
        
        else if(!row){  
           numberoftries = numberoftries + 1;
           resultLabel.setText("NOT A MATCH!" + "\n" + "Click the buttons again to flip them over." + "\n" + "You tried: " + numberoftries + " time(s).");
          
           buttons[coorlist[0]][coorlist[1]] = makeButton(new Image("file:mark.jpg"));
           grid.add(buttons[coorlist[0]][coorlist[1]],coorlist[1],coorlist[0]); 
           buttons[coorlist[0]][coorlist[1]].setOnAction(new ButtonClickHandler());
           
           buttons[coorlist[2]][coorlist[3]] = makeButton(new Image("file:mark.jpg")); 
           buttons[coorlist[2]][coorlist[3]].setOnAction(new ButtonClickHandler());
           grid.add(buttons[coorlist[2]][coorlist[3]],coorlist[3],coorlist[2]);}
           
}}

   else
      resultLabel.setText("You tried more than 32 times. GAME OVER.");

}}}

// class
       

        
