import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.paint.Color; 
import javafx.scene.layout.*;
import javafx.scene.control.Label;
import javafx.scene.control.Button;
import javafx.scene.text.Font;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.geometry.Pos;
import javafx.event.EventHandler;
import javafx.event.ActionEvent;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;

import java.util.*; 

public class ConcentrationStart extends Application
{
   Font appFont = new Font("Helvetica",24);
   Label myLabel;
   Button [][] buttons;  
   Button [][] images;
   Label resultLabel; 
   GridPane grid;
   GridPane imagegrid;
   int [] coorlist = new int[4];
   int numberoftries = 0;
   int numberoftimeswon = 0;
   int newTurnCount = 0;
   MemoryGame mg = new MemoryGame();

   public static void main(String[] args)
   {
      // Launch the application.
      launch(args);
   }
   
   @Override
   
   public void start(Stage stage)
   {  
      // Make new GridPane.
      grid = new GridPane( );
      grid.setAlignment(Pos.BASELINE_CENTER);
      int size = 2;
      mg.setBoard(); 

      imagegrid = new GridPane( );
          
      buttons = makeAGrid(grid,size); 
       
      myLabel = makeLabel("Welcome to Concentration. Match all the tiles."); 

      resultLabel = new Label(" ");
      
      VBox vbox = new VBox(myLabel, grid, resultLabel); 

      Scene scene = new Scene(vbox,500,500);   
      
      scene.getStylesheets().add("cssfile.css");   

      stage.setScene(scene);    

      stage.setTitle("Concentration/Memory Match Game");

      stage.show();
   }
   
   Label makeLabel(String s){
      Label label = new Label(s); 
      label.setFont(appFont); 
      return(label); 
   }
   
   Button makeButton(Image img){
       // create a button with an image on it
      // Create an ImageView component to decorate Button
      ImageView iView = new ImageView(img);
      iView.setFitWidth(100); 
      iView.setFitHeight(100);
      
      Button newButton =  new Button("",iView);
      return(newButton); 
   }

   Button [][]  makeAGrid(GridPane grid, int size){
   // square grid, size x size
      Button [][] b = new Button[size][size];
   
      for(int r=0;r<size;r++){ 
         for(int c = 0;c<size;c++){
            if((r+c)%2 ==0)
               b[r][c] = makeButton(new Image("file:mark.jpg"));
            else
               b[r][c] = makeButton(new Image("file:mark.jpg"));
         // add b to the grid
            grid.add(b[r][c],c, r);
         // Register the event handler.
           b[r][c].setOnAction(new ButtonClickHandler());
         } 
      }
      return(b);}  
      
Button [][]  makeAnImageGrid(GridPane imagegrid, int size){
   // square grid, size x size
      Button [][] b = new Button[size][size];
      
      b[0][0] = makeButton(new Image("file:x.png"));
      imagegrid.add(b[0][0],0, 0);
      
      b[0][1] = makeButton(new Image("file:x.png"));
      imagegrid.add(b[0][1],1, 0);
      
      b[1][0] = makeButton(new Image("file:o.png"));
      imagegrid.add(b[1][0],0, 1);
      
      b[1][1] = makeButton(new Image("file:o.png"));
      imagegrid.add(b[1][1],1, 1);
      
      return(b);}
  
class ButtonClickHandler implements EventHandler<ActionEvent> {

   @Override
   
   public void handle(ActionEvent event) {
   
   images = makeAnImageGrid(imagegrid,2);
   
   for(int r=0;r<2;r++){ 
      for(int c = 0;c<2;c++){
         if(event.getSource().equals(buttons[r][c])){ 
            if(newTurnCount%2==0){
            //Added this
               grid.getChildren().remove(buttons[r][c]);
               grid.add(images[r][c],c, r);
               coorlist[0] = r;
               coorlist[1] = c;
               newTurnCount++;}
            else {
               grid.add(images[r][c],c, r);
               coorlist[2] = r;
               coorlist[3] = c;
               newTurnCount++;} 
               }}}
            
    
     if(newTurnCount%2==0){   
         
        mg.takeTurn(coorlist); 
        boolean row = mg.isMatch(coorlist);
        
        if(row){
        //Added this
         numberoftimeswon = numberoftimeswon + 1;
         numberoftries = numberoftries + 1;
         resultLabel.setText("MATCH!" + "\n" + "You tried: " + numberoftries + " time(s).");
         if(numberoftimeswon == 2){
            resultLabel.setText("You won the game!");} 
         }
        
        else if(!row){  
        //Added this
           numberoftries = numberoftries + 1;
           resultLabel.setText("NOT A MATCH!" + "\n" + "Click the buttons again to flip them over." + "\n" + "You tried: " + numberoftries + " time(s).");
          
           buttons[coorlist[0]][coorlist[1]] = makeButton(new Image("file:mark.jpg"));
           grid.add(buttons[coorlist[0]][coorlist[1]],coorlist[1],coorlist[0]); 
           buttons[coorlist[0]][coorlist[1]].setOnAction(new ButtonClickHandler());
           
           buttons[coorlist[2]][coorlist[3]] = makeButton(new Image("file:mark.jpg")); 
           buttons[coorlist[2]][coorlist[3]].setOnAction(new ButtonClickHandler());
           grid.add(buttons[coorlist[2]][coorlist[3]],coorlist[3],coorlist[2]);
           
}}

}}}

// class
